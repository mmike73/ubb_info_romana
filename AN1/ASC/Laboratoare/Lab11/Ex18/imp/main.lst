     1                                  bits 32
     2                                  global start
     3                                  extern exit, printf, scanf
     4                                  import exit msvcrt.dll
     5                                  import printf msvcrt.dll
     6                                  import scanf msvcrt.dll
     7                                  
     8                                  %include "modul.asm"
     1                              <1> %ifndef _VC
     2                              <1> %define _VC
     3                              <1> 
     4                              <1> val_max:
     5 00000000 BA00000000          <1>     mov edx, 0
     6                              <1>     
     7                              <1>     maxim:
     8                              <1>         
     9 00000005 668B440BFE          <1>         mov ax, [ebx + ecx - 2]
    10 0000000A 6639C2              <1>         cmp dx, ax
    11 0000000D 7303                <1>         jae nup
    12 0000000F 6689C2              <1>             mov dx, ax
    13                              <1>             
    14                              <1>         nup:
    15 00000012 49                  <1>         dec ecx
    16 00000013 E2F0                <1>     loop maxim
    17                              <1>     
    18 00000015 89D0                <1>     mov eax, edx
    19                              <1>     
    20 00000017 C3                  <1>     ret
    21                              <1>     
    22                              <1>     
    23                              <1> convert_b16:
    24 00000018 51                  <1>     push ecx
    25 00000019 BB00000000          <1>     mov ebx, 0
    26 0000001E 00C3                <1>     add bl, al
    27                              <1>     
    28 00000020 50                  <1>     push eax
    29 00000021 C1E804              <1>         shr eax, 4
    30 00000024 C1E004              <1>         shl eax, 4
    31 00000027 28C3                <1>         sub bl, al
    32 00000029 58                  <1>     pop eax
    33                              <1>     
    34 0000002A C1E804              <1>     shr eax, 4
    35                              <1>     
    36 0000002D 50                  <1>     push eax
    37                              <1>     
    38 0000002E B20A                <1>     mov dl, 10
    39                              <1>     
    40 00000030 89C1                <1>     mov ecx, eax
    41 00000032 C1E904              <1>     shr ecx, 4
    42 00000035 C1E104              <1>     shl ecx, 4
    43 00000038 28C8                <1>     sub al, cl
    44                              <1>     
    45 0000003A F6E2                <1>     mul dl
    46 0000003C 6601C3              <1>     add bx, ax
    47                              <1>     
    48 0000003F 58                  <1>     pop eax
    49                              <1>     
    50 00000040 C1E804              <1>     shr eax, 4
    51                              <1>     
    52 00000043 50                  <1>     push eax
    53                              <1>     
    54 00000044 B264                <1>     mov dl, 100
    55                              <1>     
    56 00000046 F6E2                <1>     mul dl
    57 00000048 6601C3              <1>     add bx, ax
    58                              <1>     
    59 0000004B 58                  <1>     pop eax
    60                              <1>     
    61 0000004C 59                  <1>     pop ecx
    62                              <1>     
    63 0000004D 89D8                <1>     mov eax, ebx
    64 0000004F C3                  <1>     ret
    65                              <1>     
    66                              <1> %endif
     9                                  
    10                                  segment data use32 class=data
    11                                  
    12 00000050 <res 00000065>              a resb 101 
    13 000000B5 <res 000000CA>              num resw 101
    14 0000017F 00000000                    ind dd 0
    15 00000183 496E74726F6475206E-         format_inp db "Introdu numerele: ", 0
    15 0000018C 756D6572656C653A20-
    15 00000195 00                 
    16 00000196 257300                      format db "%s", 0
    17 00000199 4E756D6172756C206D-         format_d db "Numarul maxim in baza 16 este: %x", 0xA, 0
    17 000001A2 6178696D20696E2062-
    17 000001AB 617A61203136206573-
    17 000001B4 74653A2025780A00   
    18 000001BC 00000000                    maximumul dd 0
    19                                  
    20                                  
    21                                  segment code use32 class=code
    22                                  
    23                                  
    24                                  
    25                                  start:
    26                                  
    27 00000000 68[83010000]                push format_inp
    28 00000005 FF15[00000000]              call [printf]
    29 0000000B 83C404                      add esp, 4
    30                                      
    31 0000000E 68[50000000]                push a
    32 00000013 68[96010000]                push format
    33 00000018 FF15[00000000]              call [scanf]
    34 0000001E 83C408                      add esp, 4 * 2
    35                                      
    36 00000021 BE[50000000]                mov esi, a
    37 00000026 BF[50000000]                mov edi, a
    38 0000002B BB00000000                  mov ebx, 0
    39                                      
    40                                      parc:
    41 00000030 803F2C                      cmp [edi], byte','
    42                                      
    43 00000033 753E                        jne digit
    44 00000035 4F                              dec edi
    45                                          
    46 00000036 89F9                            mov ecx, edi
    47 00000038 29F1                            sub ecx, esi
    48 0000003A 41                              inc ecx
    49 0000003B B800000000                      mov eax, 0
    50 00000040 56                              push esi
    51                                          
    52                                          scrie_reg:
    53 00000041 8A16                                mov dl, [esi]
    54 00000043 80EA30                              sub dl, byte '0'
    55 00000046 C1E004                              shl eax, 4
    56 00000049 00D0                                add al, dl
    57 0000004B 46                                  inc esi 
    58 0000004C E2F3                            loop scrie_reg
    59 0000004E E8(18000000)                    call convert_b16
    60 00000053 5E                              pop esi
    61 00000054 83C702                          add edi, 2
    62 00000057 89FE                            mov esi, edi
    63 00000059 4F                              dec edi
    64                                          
    65 0000005A 8B1D[7F010000]                  mov ebx, [ind]
    66 00000060 668983[B5000000]                mov [num + ebx], ax
    67 00000067 FF05[7F010000]                  inc dword[ind]
    68 0000006D FF05[7F010000]                  inc dword[ind]
    69                                          
    70                                      digit:
    71                                      
    72                                      
    73                                      
    74 00000073 47                          inc edi
    75 00000074 807F0100                    cmp [edi + 1], byte 0
    76 00000078 7402                        je gata
    77 0000007A EBB4                        jmp parc
    78                                      gata:
    79                                      
    80                                          
    81 0000007C 89F9                            mov ecx, edi
    82 0000007E 29F1                            sub ecx, esi
    83 00000080 41                              inc ecx
    84 00000081 B800000000                      mov eax, 0
    85 00000086 56                              push esi
    86                                          
    87                                          scrie_reg1:
    88 00000087 8A16                                mov dl, [esi]
    89 00000089 80EA30                              sub dl, byte '0'
    90 0000008C C1E004                              shl eax, 4
    91 0000008F 00D0                                add al, dl
    92 00000091 46                                  inc esi 
    93 00000092 E2F3                            loop scrie_reg1
    94 00000094 E8(18000000)                    call convert_b16
    95 00000099 5E                              pop esi
    96 0000009A 83C702                          add edi, 2
    97 0000009D 89FE                            mov esi, edi
    98 0000009F 4F                              dec edi
    99                                          
   100 000000A0 8B1D[7F010000]                  mov ebx, [ind]
   101 000000A6 668983[B5000000]                mov [num + ebx], ax
   102 000000AD FF05[7F010000]                  inc dword[ind]
   103 000000B3 FF05[7F010000]                  inc dword[ind]
   104                                          
   105 000000B9 8B0D[7F010000]              mov ecx, [ind]
   106 000000BF BB[B5000000]                mov ebx, num
   107 000000C4 E8(00000000)                call val_max
   108                                      
   109 000000C9 A3[BC010000]                mov [maximumul], eax
   110                                      
   111 000000CE 50                          push eax
   112 000000CF 68[99010000]                push format_d
   113 000000D4 FF15[00000000]              call [printf]
   114 000000DA 83C408                      add esp, 4 * 2
   115                                      
   116 000000DD 6A00                        push dword 0
   117 000000DF FF15[00000000]              call [exit]
   118                                      
   119                                      
   120                                      
   121                                      
   122                                      
   123                                  
   124                                      
   125                                      
